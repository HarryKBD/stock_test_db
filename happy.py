import sqlite3
import FinanceDataReader as fdr
from datetime import datetime

#https://financedata.github.io/posts/finance-data-reader-users-guide.html

test_code = '068270'


#code text NOT NULL,
#sdate date not NULL,
#closep not null

FORMAT_DATE = "%Y-%m-%d"
my_codes = ['068270', '005930']
#code = ['140410', '302550', '251370', '064760', '036810', '005070', '278280', '298050', '009830', '306200', '327260',
        #'218410', '099320', '001820', '009150', '066570', '012330', '102120', '036420']

code = ['060310','095570','054620','006840','265520','027410','211270','282330','035760','138930','051500','001460','058820','001040','023460','079160','065770','000120','083660','011150','367340','097950','068790','000590','241520','012030','245620','016610','037370','005830','079190','000990','130500','139130','900290','004840','083450','155660','028150','069730','045890','017940','078150','365550','036640','007700','335870','114090','351340','078930','351320','006360','095340','001250','099520','007070','950170','012630','067290','039570','035900','089470','024840','294870','024120','011200','021320','082740','036670','175330','044180','234080','151860','001060','046440','096760','035600','105560','060720','009440','122450','119650','052900','092220','058400','016380','114450','001390','036030','001940','060370','025000','065150','092230','219550','000040','160550','044450','053290','030210','104200','058850','060250','058860','030190','093050','078590','003550','178920','034220','024940','001120','218410','051900','091340','032640','019550','011070','950110','066570','046140','108670','036120','037560','099220','051910','036540','079550','255220','006260','040610','000680','049470','229640','184230','023150','016250','035420','307070','005940','337450','338100','340350','034310','036490','008260','048550','010060','063440','100840','950180','064960','289080','003570','089230','036530','161570','010950','032540','034120','048770','101060','246690','005090','317240','004060','038340','001380','073570','002360','052300','009160','057030','034730','040300','011790','051390','018670','052220','001740','079940','006120','078890','210980','192410','068400','217730','096770','114190','001510','094480','285130','063080','017670','044480','000660','039240','005610','053950','011810','223310','077970','011040','071970','024910','002710','198440','024070','049720','037270','014570','000500','348150','000860','098460','035250','038530','011420','900280','002100','215000','009450','121440','267290','014200','012320','026910','000050','090150','214390','355150','012610','307280','009140','331520','013580','053270','012200','066620','002140','043650','010130','006050','002240','060480','009290','078130','017040','307750','017900','204020','037710','186230','030610','900070','339770','204620','007690','019660','005320','032860','001140','053260','002720','036190','083420','049080','014530','035460','014280','308100','008870','187790','001570','286750','002990','151910','011780','121600','214330','039860','001210','091970','073240','051490','092440','190510','000270','242040','024110','089600','013700','293580','004540','138610','001260','130580','008350','036800','004270','267320','003920','111710','025860','091590','005720','168330','002350','056000','003580','253590','251270','212560','090350','095660','000320','042420','006280','311390','005250','085910','004370','092730','072710','290660','058730','306620','023590','153460','019680','007390','006370','033640','008060','330860','353200','089140','000490','065170','008110','137940','001880','348210','005750','041140','000210','217270','006570','225570','001680','104620','084690','194700','128820','285490','117580','278650','016710','144510','003540','031390','009190','142280','014160','234690','047040','065560','009320','054050','042660','040160','003090','069140','069620','126870','000430','060260','006340','012340','003220','214870','024890','270870','002880','144960','000300','900100','012800','085670','015230','119860','001070','064260','006650','093640','001440','039560','084010','032190','001790','068240','001130','020400','003490','008830','005880','048470','003830','004780','016090','017650','069460','007720','192080','317850','012510','290670','004830','078140','024900','036480','145720','025440','002150','027830','001230','104040','023450','332290','004140','336570','007590','369370','005960','020180','026960','045390','002210','108380','102260','006580','005190','007680','000640','048910','170900','005710','028100','290380','282690','290120','001520','120240','084670','003310','002900','078600','082640','096350','008970','140520','092780','131220','049770','010170','018500','060900','006040','054670','030720','023910','014820','021040','163560','067080','004890','298540','002690','299170','000020','035290','000150','213420','241560','317330','042670','077360','034020','090410','336260','263600','016740','194480','192650','263800','024090','139050','003160','206560','001530','261200','092200','067990','013570','006620','210540','100130','007340','005160','026890','075970','115390','086450','032350','099410','330590','033500','000400','025950','023530','088130','004000','041930','286940','060380','280360','079960','004990','228340','005300','088910','011170','094170','002270','013120','071840','109860','027740','032960','204320','023790','001080','005290','088980','025900','094800','073190','138040','030350','008560','203650','000060','223250','090370','060570','017180','217620','009900','187870','012690','066670','005360','110990','204210','263690','009680','214680','009580','263720','009200','109740','033920','033430','008420','131030','025560','196490','007120','066900','006800','127120','357250','092070','085620','134580','002840','039840','268280','196450','107590','104460','134380','079810','003650','227100','155900','113810','003610','043360','001340','197140','035150','106520','002410','068930','096300','033130','007210','105740','002760','263020','003850','290550','000890','187220','003000','131180','001270','317120','026940','042510','015350','300120','011390','050120','005030','171120','002070','069540','100220','214260','030790','171010','352820','084650','005180','217500','003960','033600','008040','141080','007160','060300','014710','038390','006090','294140','001470','228670','006400','228850','006660','281740','028260','215100','207940','090360','032830','108490','018260','900260','028050','067730','009150','071280','005930','038060','001360','085370','010140','060240','016360','058470','068290','039980','029780','019570','000810','016100','006110','012700','145990','302550','003230','029480','002170','277070','272550','042500','000070','219420','002810','195500','005680','222810','003720','305090','023000','098120','004380','147760','002450','038290','004440','267980','000520','005990','009770','127160','005500','093520','004690','141070','010960','100590','004450','067280','009470','072870','011230','215200','001820','133750','000390','235980','001290','041920','041650','014100','075180','054180','007540','086900','248170','078160','007860','065650','200880','021880','017390','140410','004410','241770','021050','059210','008490','327260','007610','058110','136490','096640','002820','257370','014910','080420','003080','080160','004980','100030','011300','087260','000180','101330','002420','012860','004360','250060','004490','033200','001430','118990','306200','006920','003030','001810','019440','279600','058650','028040','013000','095500','091090','218150','021820','353490','067830','328380','033530','333430','075580','100790','027970','049950','145210','213090','308170','207760','012600','059090','068270','214610','336370','201490','004430','950190','017550','214180','134790','206640','016590','018700','029530','035620','004970','064520','011930','053030','005390','301300','004170','064550','035510','208710','034300','142760','031430','086820','031440','038460','006880','086040','005800','032980','001720','043150','009270','323990','002700','267790','019170','046310','002870','036620','293940','066410','055550','206400','001770','019010','004080','177350','102280','299910','003410','225530','003620','250000','004770','006910','015540','226340','004920','014470','112610','008470','008700','100120','090430','337930','002790','066980','002030','064480','183190','288330','002310','251630','267850','018290','020560','263920','122900','033560','010780','126340','003560','121800','033660','148140','001780','082800','018250','318410','161000','200780','011090','141000','005850','090460','012750','083650','123700','086670','025530','335890','326030','138580','023960','082920','298690','054220','140910','042370','078520','032850','015260','238200','007460','093190','003060','065450','244920','072950','036570','143240','138250','100090','181710','122350','085310','014970','009810','018310','004250','053700','900140','009620','010120','023600','014440','111870','111770','291230','009970','009300','003520','225190','000670','054540','006740','065570','012280','032280','012160','002290','015360','037460','007310','032750','002630','054090','271560','000250','001800','024950','070960','038500','316140','017480','004720','046390','118000','027580','010050','038540','006980','307870','017370','329560','105840','101000','010400','091580','049800','263810','016880','089980','095720','042940','005820','042600','010600','263540','008600','294630','033270','038070','014830','006730','000910','079650','047400','100660','011330','019770','077500','043710','002920','092190','000700','046890','003470','063170','011690','027040','072130','018680','000220','093920','001200','189860','000100','178320','003460','122690','008730','140070','008250','011370','025820','065710','214320','035890','088260','357550','139480','003100','007660','123420','005950','171090','015020','014620','093230','037350','074610','081580','102460','045300','084680','015750','350520','080470','334890','043260','000760','148150','014990','053060','101140','017510','006490','214310','023800','011560','034590','100700','129260','234100','023810','024830','249420','258830','000230','036630','013360','039310','003120','067770','003200','053450','007110','234340','007570','252500','008500','347000','081000','051980','020760','331920','020150','049180','103590','299660','015860','268600','226320','108860','317400','208370','033240','068760','000950','091990','348950','290690','194370','053110','025620','950200','036420','032680','030000','258790','271980','066910','001560','043100','002620','154040','006220','035610','089590','357780','004910','036830','004700','304100','001550','086980','000480','050960','120030','084180','018470','253840','002600','058530','185750','236200','063160','317770','001630','094840','044380','192440','013890','099440','013870','033790','071320','131100','010580','159910','035000','158310','088790','115570','003780','253450','010640','204630','100250','013810','051630','049830','272450','020710','011000','033170','002780','048870','009310','025320','000650','269620','033250','131090','035720','290520','006380','001000','109070','025870','001620','215600','029460','065350','002380','002800','344820','323280','281820','344050','009070','017000','145270','012790','030200','138070','053210','226330','033780','333050','357120','056700','007810','187270','003690','243840','192820','108320','044820','222800','005070','036710','005420','160980','071950','217330','002020','010280','003070','208640','144620','222420','120110','037760','138490','136510','021240','099320','031820','049960','192400','050890','284740','066790','015590','222080','264900','264660','005740','297090','020120','115530','039490','225330','012170','115480','014580','096530','015890','900120','006890','101240','003240','060590','011280','260930','004100','013990','009410','123860','001420','025980','007980','050320','055490','058220','078000','125210','214420','052710','084870','074430','019180','092040','363280','083930','091810','149950','004870','036010','005690','050860','036580','246720','028670','067390','010820','127710','016800','154030','001020','227610','090080','143160','010770','054800','005490','332370','058430','339950','047050','099190','003670','289010','007630','214430','017810','040910','103140','068940','005810','052860','033180','069920','086790','038880','293480','123010','039130','307180','172580','101390','153360','090740','071090','226350','019490','078860','000080','114810','000140','031310','152550','185490','036460','059100','005430','175250','071050','052460','010040','119830','025540','052770','004090','124500','002200','084850','002960','027360','123890','032080','015760','013310','006200','059120','009540','158430','023350','067160','025890','001540','000970','053800','104700','065660','017960','297570','161890','260660','024720','131370','161390','140670','000240','096610','034830','061040','007280','148250','168490','347860','010100','196170','047810','123750','123690','085810','003350','117670','011500','291650','002390','293780','014790','196300','060980','310200','053690','205500','042700','052790','008930','131400','128940','290740','009240','238090','020000','092600','003680','129890','105630','174900','069640','255440','016450','030960','009180','102120','213500','238120','014680','019990','004710','041440','010420','038680','004150','217480','025750','121890','004960','097780','011700','042110','001750','298060','018880','065420','009420','103230','014130','900080','300720','101490','002220','095910','006390','275630','003300','031330','051600','060540','052690','056190','130660','080000','002320','041510','097230','007820','003480','109610','180640','306040','005110','080440','009460','096630','000880','069510','088350','041910','000370','234300','009830','039440','272210','098660','012450','052020','003530','237690','195870','050760','101530','288620','143210','317830','000720','058610','267270','043340','005440','054630','086280','200710','064350','096690','079430','298380','012330','195990','010620','003800','069960','088800','004560','241840','004310','138360','322000','039230','017800','312610','307950','072990','011210','176440','267260','028300','005380','067630','004020','047920','011760','043220','267250','239610','001500','353070','227840','353060','126560','044780','001450','071670','057050','045660','093240','224110','003010','230980','111110','021080','008770','089530','002460','200470','013520','073070','241590','262260','006060','109960','010690','089970','133820','230240','010660','064510','000850','230360','016580','038870','032560','128540','004800','086520','094280','247540','298040','038110','298050','073540','298020','064850','298000','064090','093370','036810','081660','173940','005870','083500','079980','054940','005010','950130','069260','205100','000540','070300','003280','092870','317870','067570','101400','217820','031860','310840','319400','353190','359090','365590','265740','354200','208860','183490','182400','069410','227950','198080','048830','096870','061970','138690','290650','066970','156100','073110','083310','297890','037950','170920','058630','019590','169330','097520','179290','009780','123040','323230','032790','033160','347890','033310','259630','115960','060850','007530','143540','036560','265560','036000','250930','053280','122640','900300','045060','080520','039830','046120','014940','065500','010470','053980','052420','241790','039200','226400','031510','048260','138080','080580','067170','173130','049480','309930','244460','226950','057540','082210','109080','153710','122990','232140','067900','155650','251370','066430','193250','273060','019210','122870','332570','079000','114630','032820','041190','115440','046970','082850','215360','072470','073560','153490','037400','101170','066590','103840','046940','215380','065680','018620','053080','032940','240810','074600','104830','014190','030530','012620','008370','008290','101160','095270','065950','076080','196700','069080','053580','071460','044340','330350','348350','112040','065370','038620','299900','036090','136540','320000','097800','192390','313760','900340','036200','018000','203450','011320','086390','241690','142210','048430','206650','089850','032620','264450','078070','024800','054930','069330','049520','287410','313750','336060','340360','367460','056090','263770','023410','056080','321260','331380','084370','178780','179900','263050','191410','072770','039020','060230','067920','044960','302430','073490','086250','215790','246960','088390','272290','053350','258610','215090','041520','264850','054210','164060','065440','036260','115610','349720','323210','078020','080010','086890','047560','900110','067010','052190','226360','101360','102710','063760','087730','123570','083470','095190','091120','039030','294090','088290','181340','353810','090850','099750','035810','160600','092130','096040','134060','001840','024810','041830','352940','079950','277410','060150','033230','037330','083640','216050','049070','119610','017250','035080','051370','064290','189300','150840','048530','175140','115310','039290','041020','071200','101930','068330','058450','019540','094820','950140','049550','254120','221610','043910','234920','174880','049630','110020','065530','208140','022220','040420','045510','065620','217190','095700','072520','122310','187420','225220','123330','159580','147830','033100','079370','054950','090470','137950','033320','204270','026040','126880','322510','033050','094970','058420','089790','052670','199820','023440','038010','080220','216080','229000','082270','064800','041590','044060','034940','101730','067000','033340','036930','239340','072020','000440','228760','314130','043610','263860','303030','036180','208350','114570','051160','053050','119850','270520','065060','204840','111820','115450','219750','018120','109820','086060','036890','007370','085660','094850','004650','311690','278280','096240','013720','066360','047820','094360','016920','284620','293490','042000','317530','071850','180400','050110','900310','078340','307930','263700','214370','221980','043290','317030','323940','330990','342550','192250','115500','089150','025880','093320','073010','105330','272110','039420','083550','032500','225430','064820','347140','256940','024880','042040','054410','274090','217600','089010','220260','052400','033110','094860','046070','047770','078940','080530','224060','078650','104540','027050','290510','190650','101670','123410','036690','049430','183300','041960','089890','009730','082660','222040','241710','069110','166480','045970','029960','102940','950160','033290','056360','282880','121850','015710','052330','322780','126600','200130','317690','060280','040350','051780','115180','043090','182360','066310','016600','043590','114120','110790','900250','083790','045520','036170','214150','352770','237880','139670','311270','054780','219130','065130','023160','053620','044490','124560','191420','073640','182690','066700','095610','131970','089030','054450','091440','200230','215480','051360','045340','108230','079970','105550','026150','322180','117730','033830','057680','064760','246710','340570','277880','131290','356860','062860','321550','104480','081150','130740','084730','046210','034230','033540','043200','214450','208340','177830','037070','150900','037030','047310','170790','049120','038950','106240','131760','065690','140860','091700','038160','032800','318010','027710','225590','054300','068050','222110','263750','251970','087010','043370','119500','016670','056730','022100','009520','189690','318020','256630','141020','290720','005670','094940','007330','093380','023900','195440','214270','220100','035200','203690','053610','335810','053160','075130','237820','023770','300080','032580','051380','241820','237750','131390','024850','319660','031980','002230','347740','137400','128660','006140','304840','062970','087600','057880','161580','347770','332710','341160','343510','299030','067310','307160','166090','136480','003380','149980','013030','126700','106080','340120','221840','106190','066130','004590','039340','034950','222980','318000','256840','025550','023890','017890','080720','063570','041460','101680','039740','053300','025770','310870','023760','054040','050540','021650','053590','032300','037230','030520','052600','256150','092460','039670','047080','070590','226440','042520','078350','045100','046110','024740','005860','123840','007770','079170','086960','054920','002680','066110','317320','340440','102210','220630','034810','076610','220180','008800','900270','084990','170030','048410','052260','016790','039010','092300','053660','011080','060560','064240','039610','126640','061250','097870','050090','290270','090710','205470','115160','028080','200670','065510','243070','084110','145020','024060','010240','189980','037440','238490']
my_codes = code
class StockPrice:
    def __init__(self, code, date, openp = 0.0, highp = 0.0, lowp = 0.0, closep=0.0, volume = 0, change=0.0):
        self.code = code
        self.date = date
        self.closep = closep
        self.openp = openp
        self.highp = highp
        self.lowp = lowp
        self.change = change
        self.volume = volume

    def to_price_text(self):
        return "{} {} {:.1f}".format(self.code, self.date.strftime(FORMAT_DATE), self.closep)
    def to_full_text(self):
        return "{} {} {:.1f} {:.1f} {:.1f} {:.1f} {} {:.1f}".format(
                self.code, self.date.strftime(FORMAT_DATE), 
                self.openp, self.highp, self.lowp, self.closep, self.volume, self.change)
    def get_code(self):
        return self.code
    def get_date(self):
        return self.date.strftime(FORMAT_DATE)
    def get_open(self):
        return self.openp
    def get_high(self):
        return self.highp
    def get_low(self):
        return self.lowp
    def get_close(self):
        return self.closep
    def get_volume(self):
        return self.volume
    def get_change(self):
        return self.change

def same_date(a, b):
    if a.year == b.year and a.month == b.month and a.day == b.day:
        return True
    else:
        return False

def get_stock_data(code, s, e):
    price_days = []
    col_closed = 'Close'
    sdate_str = s.strftime(FORMAT_DATE)
    edate_str = e.strftime(FORMAT_DATE)
    while True:
        df = fdr.DataReader(code, sdate_str, edate_str)
        if len(df) == 0:
            #print("No more data for code : " + code)
            break
        #print(df.head())
        openp = df['Open']
        highp = df['High']
        lowp = df['Low']
        closep = df[col_closed]
        vol = df['Volume']
        change = df['Change']

        idx = df.index
        i = 0
        for c in closep:
            last_date =  idx[i].to_pydatetime()
            dd = last_date.strftime(FORMAT_DATE)
            s = StockPrice(code, last_date, float(openp[i]), float(highp[i]), 
                    float(lowp[i]),  float(c), int(vol[i]), float(change[i]))
            price_days.append(s)
            #print(s.to_text())
            i += 1
        
        if same_date(e, last_date):
            break;
        sdate_str = "{}-{}-{}".format(last_date.year, last_date.month+1, last_date.day)

    return price_days

def insert_stock_data(conn, s_list):
    try:
        c = conn.cursor()
        for s in s_list:
            query = (
                    "insert or ignore into stocks(code, sdate, open, high, low, close, volume, change) "
                    + "values('{}', '{}', {:.1f}, {:.1f}, {:.1f}, {:.1f}, {}, 0.0)"
                    ).format(s.get_code(), s.get_date(), s.get_open(), s.get_high(),
                            s.get_low(), s.get_close(), s.get_volume())
            #print(query)
            c.execute(query)

        conn.commit()
    except sqlite3.DatabaseError as e:
        print(e)
        pass
#c.execute("insert into stocks(code, sdate, closep) values(068270, '2021-01-12', 123.456)")
#c.execute("insert into stocks(code, sdate, closep) values(068270, '2021-01-13', 123.456)")
#c.execute("insert into stocks(code, sdate, closep) values(068270, '1999-01-13', 123.456)")
#conn.commit()


def prepare_initial_table(conn, date_from):
    now = datetime.now()
    edate_str = now.strftime(FORMAT_DATE)

    sdate_str = date_from.strftime(FORMAT_DATE)
    
    now = datetime(2021, 1,16)

    print("{} from  ==> {} to".format(sdate_str, edate_str))
    cnt = 1
    for code in my_codes:
        result_list = get_stock_data(code, date_from, now)
        insert_stock_data(conn, result_list)
        print("Getting {} data:  {} / {} ==> cnt: {}".format(code, str(cnt), str(len(my_codes)), str(len(result_list))))
        cnt += 1

    #op 1: 'BUY'  2: 'SELL'

def log_stock_trading(conn, code, op, price, vol):
    now = datetime.now()
    op_time = now.strftime("%Y-%m-%d %H:%M:%S.%f")
    query = (
            "insert or ignore into trade_history(code, op_time, operation, volume, price) " + 
            "values('{}','{}','{}',{},{:.2f})"
            ).format(code, op_time, op, str(vol), price);
    try:
        c = conn.cursor()
        print(query)
        c.execute(query)
        conn.commit()
    except Error as e:
        print(e)
        return False
    return True

def log_sell_stock(conn, code, price, vol):
    return log_stock_trading(conn, code, 'SELL', price, vol)

def log_buy_stock(conn, code, price, vol):
    return log_stock_trading(conn, code, 'BUY', price, vol)
 

def create_trade_history_table(conn):
    query = """CREATE TABLE IF NOT EXISTS trade_history(
                code TEXT NOT NULL,
                op_time DATETIME NOT NULL,
                operation TEXT NOT NULL,
                volume INT NOT NULL,
                price FLOAT NOT NULL
                );"""
    try:
        c = conn.cursor()
        c.execute(query)
    except Error as e:
        print(e)
        return False
    return True

def create_table(conn):
    query = """CREATE TABLE IF NOT EXISTS stocks(
                code text NOT NULL,
                sdate date NOT NULL,
                open FLOAT NOT NULL,
                high FLOAT NOT NULL,
                low FLOAT NOT NULL,
                close FLOAT NOT NULL,
                volume INT NOT NULL,
                change FLOAT NOT NULL,
                PRIMARY KEY (code, sdate)
                );"""
    try:
        c = conn.cursor()
        c.execute(query)
    except Error as e:
        print(e)
        return False
    return True

#print(fdr.__version__)

def get_closed_price(code, dd):
    colname = 'Close'
    df = fdr.DataReader(code, dd, dd)
    print(df.head())
    print("-"*100)
    print(len(df))
    print("-"*100)
    print(float(df[colname][0]))
    print("-"*100)
    print(type(df[colname]))
    print("-"*100)
    if len(df) == 1:
        return float(df[colname])
    else:
        return -1.0

def get_current_price(code):
    now = datetime.now()
    d = now.strftime("%y-%m-%d")
    print("Today: " + d)
    return get_closed_price(code, d)


print("Current proce: " + str(get_current_price(test_code)))


#df = fdr.DataReader('068270', '2021-01-14', '2021-01-14')
#print(df.head())
#print("-"*100)
#print(len(df))
#print("-"*100)
#print(float(df['Close'][0]))
#print("-"*100)
#print(type(df['Close']))
#print("-"*100)

conn = sqlite3.connect("stock.db")
create_table(conn)
create_trade_history_table(conn)


c = conn.cursor()

from_date = datetime(2001, 1, 1)
prepare_initial_table(conn, from_date)  #returns only 5 per query
#log_buy_stock(conn, '068270', 300000, 999)
#log_sell_stock(conn, '068270', 380000, 999)


#for row in c.execute('select * from stocks order by code, sdate'):
#for row in c.execute('select * from trade_history order by op_time'):
#for row in c.execute('select code, count(*) from stocks group by code'):
#   print(row)


conn.close()
